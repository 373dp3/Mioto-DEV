--- ./old/Master.c	2017-11-27 15:41:22.000000000 +0900
+++ ./new/Master.c	2019-03-15 16:03:58.142922500 +0900
@@ -72,6 +72,13 @@
 /***        Type Definitions                                              ***/
 /****************************************************************************/
 
+// -- dp3 -- V
+#define TOCONET_PACKET_CMD_APP_USER_CT_DATA_DP3EX	(TOCONET_PACKET_CMD_APP_USER+3)
+static void vReceiveMiotoData(tsRxDataApp *pRx);
+//親機シリアル出力時にCTデータである事を識別する符号:7F「D3」～～
+#define SERCMD_ID_INFORM_CT_DATA	(0xD3)
+// -- dp3 -- A
+
 /****************************************************************************/
 /***        Local Function Prototypes                                     ***/
 /****************************************************************************/
@@ -1133,6 +1140,14 @@ void cbToCoNet_vRxEvent(tsRxDataApp *psR
 			vReceiveIoSettingRequest(psRx);
 		}
 		break;
+	case TOCONET_PACKET_CMD_APP_USER_CT_DATA_DP3EX: // dp3
+#ifdef USE_MONOSTICK
+			//bColdStart = FALSE;
+#endif
+		if (PRSEV_eGetStateH(sAppData.u8Hnd_vProcessEvCore) == E_STATE_RUNNING) { // 稼動状態でパケット処理をする
+			vReceiveMiotoData(psRx);
+		}
+		break;		
 	}
 }
 
@@ -3551,6 +3566,121 @@ static int16 i16TransmitSerMsg(uint8 *p,
 }
 
 /** @ingroup MASTER
+ * IO状態パケットの受信処理を行います。
+ *
+ * - 受信したデータに格納されるIO設定要求に従いIO値(DO/PWM)を設定します。
+ * - 受信したデータを UART に出力します。
+ * - 中継機の場合、中継パケットを送信します。
+ * - 低遅延で送信されてきたパケットの TimeStamp の MSB には１が設定される。
+ *   このパケットは、タイムスタンプによる重複除去アルゴリズムとは独立して
+ *   処理される。
+ * - IOの設定は本受信関数でのみ行われる。
+ *
+ * @param pRx 受信データ
+ */
+static void vReceiveMiotoData(tsRxDataApp *pRx) {
+	int i, j;
+	uint8 *p = pRx->auData;
+
+	uint8 u8AppIdentifier = G_OCTET();
+
+	uint8 u8PtclVersion = G_OCTET();
+	if (u8PtclVersion != APP_PROTOCOL_VERSION)
+		return;
+
+	uint8 u8AppLogicalId = G_OCTET();
+
+	uint32 u32Addr = G_BE_DWORD();
+
+	uint8 u8AppLogicalId_Dest = G_OCTET();
+	(void) u8AppLogicalId_Dest;
+
+	uint16 u16TimeStamp = G_BE_WORD();
+
+	/* 重複の確認を行う */
+	bool_t bQuick = u16TimeStamp & 0x8000 ? TRUE : FALSE; // 優先パケット（全部処理する）
+	u16TimeStamp &= 0x7FFF;
+	if (bQuick == FALSE
+			&& bCheckDupPacket(&sDupChk_IoData, u32Addr, u16TimeStamp)) {
+		return;
+	}
+	static uint32 u32LastQuick;
+	if (bQuick) {
+		if ((u32TickCount_ms - u32LastQuick) < 20) {
+			// Quickパケットを受けて一定期間未満のパケットは無視する
+			return;
+		} else {
+			u32LastQuick = u32TickCount_ms; // タイムスタンプを巻き戻す
+		}
+	}
+
+	// 中継フラグ
+	uint8 u8TxFlag = G_OCTET();
+
+	// 中継の判定 (レベルに達していなければ中継する）
+	if (sAppData.u8Mode == E_IO_MODE_ROUTER || (sAppData.u8Mode == E_IO_MODE_CHILD && IS_APPCONF_OPT_ROUTING_CHILD())) {
+		if (u8TxFlag < sAppData.u8max_hops) {
+			// リピータの場合はここで中継の判定
+			*(p - 1) = *(p - 1) + 1; // 中継済みフラグのセット
+			// 中継する
+			i16TransmitRepeat(pRx); // 中継パケットの送信
+		}
+
+		// 専業中継機の場合は、ここで終了
+		if (sAppData.u8Mode == E_IO_MODE_ROUTER ) {
+			return;
+		}
+	}
+
+	// 親機子機の判定
+	if ((IS_LOGICAL_ID_PARENT(u8AppLogicalId)
+			&& IS_LOGICAL_ID_CHILD(sAppData.u8AppLogicalId))
+	|| (IS_LOGICAL_ID_CHILD(u8AppLogicalId) && IS_LOGICAL_ID_PARENT(sAppData.u8AppLogicalId)) ){
+		; // 親機⇒子機、または子機⇒親機への伝送
+	} else {
+		return;
+	}
+
+	/* 電圧 */
+	uint16 u16Volt = G_BE_WORD();
+
+	/* 温度 */
+#ifdef USE_I2C_PORT_AS_PWM_SPECIAL
+	u8PwmSpe_RxMode = G_OCTET();
+#else
+//	int8 i8Temp = (int8)G_OCTET();
+//	(void)i8Temp;
+	int8 i8Seq = (int8)G_OCTET();
+	(void)i8Seq;
+#endif
+
+	/* BUTTON */
+	uint8 u8ButtonState = G_OCTET();
+	bool_t bRegular = !!(u8ButtonState & 0x80);
+	//uint8 u8ButtonChanged = G_OCTET();
+	uint8 u8Rep = G_OCTET();
+	(void)u8Rep;
+	/* ポート設定変更は行わない
+
+	/* タイムスタンプ */
+	sAppData.sIOData_now.u32RxLastTick = u32TickCount_ms;
+
+	/* UART 出力 */
+	if (TRUE) {
+		if (IS_APPCONF_OPT_REGULAR_PACKET_NO_DISP() && bRegular) {
+			; // 通常パケットの場合の出力抑制設定
+		} else {
+			// 以下のようにペイロードを書き換えて UART 出力
+			//pRx->auData[0] = pRx->u8Len; // １バイト目はバイト数 // AppIdはセンサIdとして流用するため残す。
+			pRx->auData[2] = pRx->u8Lqi; // ３バイト目(もともとは送信元の LogicalID) は LQI
+			vSerOutput_ModbusAscii(&sSerStream, u8AppLogicalId,
+					SERCMD_ID_INFORM_CT_DATA, pRx->auData, pRx->u8Len);
+
+		}
+	}
+}
+
+/** @ingroup MASTER
  * IO状態パケットの受信処理を行います。
  *
  * - 受信したデータに格納されるIO設定要求に従いIO値(DO/PWM)を設定します。
