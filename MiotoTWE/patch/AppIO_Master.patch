--- ./old/Master.c	2017-03-09 17:11:42.000000000 +0900
+++ ./new/Master.c	2019-03-25 15:17:18.343209300 +0900
@@ -67,6 +67,17 @@
 #define TX_OPT_RESP_BIT 8
 #define TX_OPT_BY_INT 0x10 // 割り込みによる送信を明示する (sleep 時は bWakeUpByButton フラグも利用される)
 
+
+//-- dp3 による追加 -- V
+//親機モードの時、有効にする
+#define TOCONET_PACKET_CMD_APP_USER_CT_DATA_DP3EX	(TOCONET_PACKET_CMD_APP_USER+3)
+uint8 dp3Seq = 0;
+uint8 dp3Rep = 0;
+uint8 dp3BtnBuf = 0;
+static int16 i16TransmitMiotoData(bool_t bQuick, bool_t bRegular);
+//-- dp3 による追加 -- A
+
+
 /****************************************************************************/
 /***        Type Definitions                                              ***/
 /****************************************************************************/
@@ -401,9 +412,28 @@ void vProcessEvCoreSlp(tsEvent *pEv, teE
 	switch(pEv->eState) {
 	case E_STATE_IDLE:
 		if (eEvent == E_EVENT_START_UP) {
+			//App_IOはADCの設定が無いため、https://mono-wireless.com/jp/tech/Programming/PERIPH_battery.html
+			//をもとに電池電圧のAD処理をハードコーディング
+			vAHI_AdcEnable(
+				E_AHI_ADC_SINGLE_SHOT,
+				E_AHI_AP_INPUT_RANGE_2, /* 2*Vref(=2.4V) レンジ */
+				E_AHI_ADC_SRC_VOLT);
+			vAHI_AdcStartSample(); // ADC開始
 			if (u32evarg & EVARG_START_UP_WAKEUP_MASK) {
+				//dp3 繰り返し回数通知
+				if(sAppData.bWakeupByButton){
+					//DI割り込み
+					dp3Seq ++;
+					dp3Rep = 0;
+				}else{
+					//TMタイマー割り込み
+					dp3Rep ++;
+				}
 				// ウェイクアップ時
-				vfPrintf(&sSerStream, LB"!INF %s:", sAppData.bWakeupByButton ? "DI" : "TM");
+				if(dp3Rep!=0){
+					vfPrintf(&sSerStream, LB"!INF %s, SEQ %d, REP %d:", 
+						sAppData.bWakeupByButton ? "DI" : "TM", dp3Seq, dp3Rep -1 );
+				}
 			} else {
 				// 電源投入起動(POR)
 				if (IS_APPCONF_OPT_LOW_LATENCY_INPUT_SLEEP_TX_BY_INT()) {
@@ -546,7 +576,13 @@ void vProcessEvCoreSlp(tsEvent *pEv, teE
 				sAppData.sIOData_now.i16TxCbId = i16TransmitIoData(TX_OPT_NODELAY_BIT | TX_OPT_QUICK_BIT | TX_OPT_RESP_BIT);
 			} else {
 				// QUICK 送信
-				sAppData.sIOData_now.i16TxCbId = i16TransmitIoData(TX_OPT_NODELAY_BIT | TX_OPT_QUICK_BIT);
+				if(dp3Rep == 0){ //dp3 H->Lの応答が1サイクル遅れるため、初回(dp3Rep==0)は破棄する。
+					ToCoNet_Event_SetState(pEv, E_STATE_APP_REMOTE_FINISH);
+					break;
+				}else{
+					DBGOUT(1, LB"INTO invoke transmit func."LB);//dp3 debug
+					sAppData.sIOData_now.i16TxCbId = i16TransmitMiotoData(TRUE, FALSE);
+				}
 			}
 
 			if (bRemoteMode) {
@@ -655,7 +691,12 @@ void vProcessEvCoreSlp(tsEvent *pEv, teE
 	case E_STATE_APP_SLEEPING:
 		if (eEvent == E_EVENT_NEW_STATE) {
 			pEv->bKeepStateOnSetAll = FALSE;
-			vSleep(sAppData.u32SleepDur, TRUE, FALSE, FALSE);
+			if(dp3Rep < 5){
+				sAppData.u32SleepDur = 200UL;
+			}else{
+				sAppData.u32SleepDur = 0UL;
+			}
+				vSleep(sAppData.u32SleepDur, TRUE, FALSE, FALSE);
 		}
 		break;
 
@@ -738,9 +779,15 @@ void cbAppColdStart(bool_t bStart) {
 		// フラッシュの読み出し
 		vLoadFlashOnBoot();
 
+		// dp3 旧ファームがApp_Tweliteをベースに改修した関係から、同じ値に決め打ちする
+		sAppData.sFlash.sData.u32appid = 0x67720102;
+
 		// その他ハードウェアの初期化
 		vInitHardware(FALSE);
 
+		//dp3 デバッグ出力初期値修正
+		//sAppData.u8DebugLevel = 3;
+
 		if( LOGICAL_ID_PAIRING == au8IoModeTbl_To_LogicalID[sAppData.u8Mode] ){
 			tsPairingConf sConfig;
 			memset(&sConfig, 0x00, sizeof(tsPairingConf));
@@ -843,6 +890,11 @@ void cbAppColdStart(bool_t bStart) {
 				sAppData.u8Mode = E_IO_MODE_CHILD_SLP_10SEC;
 			}
 #endif
+			//dp3 子機モードの強制
+			sAppData.u8Mode = E_IO_MODE_CHILD_SLP_10SEC;
+
+			//dp3 このフラグを設定しておかないとパケットが送信されない為
+			sAppData.sFlash.sData.u32Opt = E_APPCONF_OPT_LOW_LATENCY_INPUT_SLEEP_TX_BY_INT;
 
 			// 各モード依存の初期値の設定など
 			switch(sAppData.u8Mode) {
@@ -1567,6 +1619,23 @@ static void vInitHardware(int f_warm_sta
 		vTimerConfig(&sTimerApp);
 		vTimerStart(&sTimerApp);
 	}
+
+	// ADC (dp3によるApp_TweLiteからの移植)
+	//vADC_Init(&sAppData.sObjADC, &sAppData.sADC, TRUE); 内部より、
+	//初期化に関連するコードのみを抽出移植
+	{
+		if (!bAHI_APRegulatorEnabled()) {
+			vAHI_ApConfigure(E_AHI_AP_REGULATOR_ENABLE,
+							E_AHI_AP_INT_ENABLE,
+							E_AHI_AP_SAMPLE_2,
+							E_AHI_AP_CLOCKDIV_500KHZ,
+							E_AHI_AP_INTREF);
+
+			while(!bAHI_APRegulatorEnabled());
+		}
+	}
+
+
 }
 
 
@@ -1609,11 +1678,16 @@ static void vInitHardware_IOs(int f_warm
 		) {
 			// 割り込みを有効にする
 			vAHI_DioInterruptEnable(u32_PORT_INPUT_MASK, 0); // 割り込みの登録
+			/*/ dp3 double edge 化
 			if (IS_APPCONF_OPT_DI_INVERT()) {
 				vAHI_DioInterruptEdge(u32_PORT_INPUT_MASK, 0); // 割り込みエッジの登録(立ち上がり)
 			} else {
 				vAHI_DioInterruptEdge(0, u32_PORT_INPUT_MASK); // 割り込みエッジの登録(立ち下がり)
 			}
+			/*/
+			//dp3 double edge 化
+			vAHI_DioInterruptEdge(u32_PORT_INPUT_MASK, u32_PORT_INPUT_MASK); // 割り込みエッジの登録(両エッジ)
+			//*/
 		} else {
 			vAHI_DioInterruptEnable(0, u32_PORT_INPUT_MASK); // 割り込みを無効化
 		}
@@ -2000,6 +2074,159 @@ static bool_t bCheckDupPacket(tsDupChk_C
 	return FALSE;
 }
 
+
+/** @ingroup MASTER
+ * IO 情報を送信します。
+ *
+ * - IO状態の変化、および１秒置きの定期送時に呼び出されます。
+ *
+ * - Packet 構造
+ *   - OCTET: センサータイプ(センサー子機毎の固有ID CT:0x01)
+ *   - OCTET: プロトコルバージョン(バージョン間干渉しないための識別子)
+ *   - OCTET: 送信元論理ID
+ *   - BE_DWORD: 送信元のシリアル番号
+ *   - OCTET: 宛先論理ID
+ *   - BE_WORD: 送信タイムスタンプ (64fps カウンタの値の下１６ビット, 約1000秒で１周する)
+ *   - OCTET: 中継フラグ(中継したパケットは１、最初の送信なら０を格納）
+ *   - BE_WORD: 電圧
+ *   - OCTET: シーケンス番号(SW状態が変化する度に加算する番号)
+ *   - OCTET: ボタン (LSB から順に SW1 ... SW4, 1=Lo), 0x80ビットは通常送信の識別用フラグ
+ *   - OCTET: リピート番号(再送毎に加算。パケットロス時に起点時刻復元用)
+ *   - OCTET: ADC1 (MSB から 8bit)
+ *   - OCTET: ADC2 (MSB から 8bit)
+ *   - OCTET: ADC3 (MSB から 8bit)
+ *   - OCTET: ADC4 (MSB から 8bit)
+ *   - OCTET: ADC 詳細部 (MSB b8b7b6b5b4b3b2b1 LSB とすると b2b1 が ADC1 の LSB 2bit, 以下同様)
+ *
+ * - ADC 値の復元方法
+ *   - 8bit ADC値の場合 16倍すると mV 値になります。
+ *   - ADC詳細部の2bitを追加し 10bit ADC 値の場合 4 倍すると mV 値なります。
+ *
+ * @returns -1:ERROR, 0..255 CBID
+ */
+static int16 i16TransmitMiotoData(bool_t bQuick, bool_t bRegular) {
+	if (IS_APPCONF_ROLE_SILENT_MODE())
+		return -1;
+
+	int16 i16Ret = -1;
+	tsTxDataApp sTx;
+	memset(&sTx, 0, sizeof(sTx));
+
+	uint8 *q = sTx.auData;
+
+	int i;
+
+	// ペイロードを構成
+	//S_OCTET(sAppData.u8AppIdentifier);//識別ヘッダ(APP IDより生成)
+	S_OCTET(0x01);//識別ヘッダ // dp3 0x01:CT
+	S_OCTET(0x01);//プロトコルバージョン
+	S_OCTET(sAppData.u8AppLogicalId); //送信元論理ID
+	S_BE_DWORD(ToCoNet_u32GetSerial());  //送信元シリアル番号
+	S_OCTET(
+			IS_LOGICAL_ID_PARENT(sAppData.u8AppLogicalId) ? LOGICAL_ID_CHILDREN : LOGICAL_ID_PARENT); // 宛先
+	S_BE_WORD((sAppData.u32CtTimer0 & 0x7FFF) + (bQuick == TRUE ? 0x8000 : 0)); // タイムスタンプ
+	// bQuick 転送する場合は MSB をセットし、優先パケットである処理を行う
+	S_OCTET(0); // 中継フラグ
+
+	//App_IOにはADCの処理が無いため、
+	//https://mono-wireless.com/jp/tech/Programming/PERIPH_battery.html
+	//の情報をもとにハードコーディングを試みたが、u16AHI_AdcRead()を実行した
+	//時点で例外が発生して終了してしまう。
+	uint16 u16AdcValue = ((int32)(u16AHI_AdcRead()) * 3705) >> 10;
+	S_BE_WORD(u16AdcValue); // 電圧
+	DBGOUT(1, "Batt[v]: %d"LB, u16AdcValue);
+
+
+	// ボタンのビットマップ
+	uint8 u8bm = 0;
+
+	for (i = 0; i < 8; i++) {//TODO ここを4=>8に変えれば良さそう。配列サイズは12になっているし。
+		uint8 u8ct = sAppData.sIOData_now.au8Input[i] >> 4;
+
+		if (u8ct >= LOW_LATENCY_DELAYED_TRANSMIT_COUNTER - 3) { // カウンタ値が残っている場合は 1 を送る
+			u8bm |= (1 << i);
+		} else {
+			u8bm |= (sAppData.sIOData_now.au8Input[i] & 1) ? (1 << i) : 0;
+		}
+	}
+
+	if (bRegular) u8bm |= 0x80; // MSB を設定
+
+	//繰り返しなのにボタン状態が変化している場合はSeq、Repを更新
+	if((dp3Rep > 1) && (u8bm != dp3BtnBuf)){
+		dp3Seq ++;
+		dp3Rep = 1;
+	}
+	dp3BtnBuf = u8bm;
+
+	S_OCTET((uint8)(dp3Seq));//シーケンス番号
+	S_OCTET(u8bm);//ボタン状態
+
+
+
+	S_OCTET((uint8)(dp3Rep - 1));//リピート番号
+
+	// ADC 部のエンコード(App_IOでは無効なので0を格納)
+	uint8 u8LSBs = 0;
+	for (i = 0; i < 4; i++) {
+		// MSB 部分 (10bit目～3bit目まで)
+		uint16 u16v = 0;//sAppData.sIOData_now.au16InputADC[i];
+		u16v >>= 2; // ADC 値は 0...2400mV
+
+		uint8 u8MSB = (u16v >> 2) & 0xFF;
+		S_OCTET(u8MSB);
+
+		// 下2bitを u8LSBs に詰める
+		u8LSBs >>= 2;
+		u8LSBs |= ((u16v << 6) & 0xC0); //
+	}
+	S_OCTET(u8LSBs); // 詳細ビット部分を記録
+
+	sTx.u8Len = q - sTx.auData; // パケット長
+	sTx.u8Cmd = TOCONET_PACKET_CMD_APP_USER_CT_DATA_DP3EX; // パケット種別
+
+	// 送信する
+	sTx.u32DstAddr = TOCONET_MAC_ADDR_BROADCAST; // ブロードキャスト
+	sTx.u8Retry = 0x81; // 1回再送
+
+	// フレームカウントとコールバック識別子の指定
+	sAppData.u16TxFrame++;
+	sTx.u8Seq = (sAppData.u16TxFrame & 0xFF);
+	sTx.u8CbId = sTx.u8Seq;
+
+	{
+		/* MAC モードでは細かい指定が可能 */
+		sTx.bAckReq = FALSE;
+		sTx.u32SrcAddr = sToCoNet_AppContext.u16ShortAddress;
+		//sTx.u16RetryDur = bQuick ? 0 : 4; // 再送間隔
+		//sTx.u16DelayMax = bQuick ? 0 : 16; // 衝突を抑制するため送信タイミングにブレを作る(最大16ms)
+		//クイック時でも強制的に間隔・ブレを挿入する
+		sTx.u16RetryDur = 4;
+		sTx.u16DelayMax = 16;
+
+#ifdef USE_SLOW_TX
+	    //ここから
+	    if (bQuick == 0x10) {
+	      sTx.u8Retry = 0x83; // 再送回数を３回とする
+	      sTx.u16DelayMax = 100; // 初回送信は送信要求発行時～100ms の間（ランダムで決まる）
+	      sTx.u16RetryDur = 20; // 20ms おきに再送する
+	    }
+	    //ここまで
+#endif
+		// 送信API
+		if (ToCoNet_bMacTxReq(&sTx)) {
+			ToCoNet_Tx_vProcessQueue();
+
+			i16Ret = sTx.u8CbId;
+			sAppData.sIOData_now.u32TxLastTick = u32TickCount_ms;
+		}
+	}
+
+	return i16Ret;
+}
+
+
+
 /** @ingroup MASTER
  * IO 情報を送信します。
  *
@@ -2020,6 +2247,7 @@ static bool_t bCheckDupPacket(tsDupChk_C
  * @returns -1:ERROR, 0..255 CBID
  */
 static int16 i16TransmitIoData(uint8 u8Quick) {
+
 	if(IS_APPCONF_ROLE_SILENT_MODE()) return -1;
 
 	int16 i16Ret = -1;
@@ -2667,11 +2895,16 @@ static void vSleep(uint32 u32SleepDur_ms
 	if (!bNoIoInt) {
 		vAHI_DioWakeEnable(u32_PORT_INPUT_MASK, 0); // also use as DIO WAKE SOURCE
 
+		/*/ dp3 double edge化
 		if (IS_APPCONF_OPT_DI_INVERT()) {
 			vAHI_DioWakeEdge(u32_PORT_INPUT_MASK, 0); // 割り込みエッジ（立上りに設定）
 		} else {
 			vAHI_DioWakeEdge(0, u32_PORT_INPUT_MASK); // 割り込みエッジ（立下りに設定）
 		}
+		/*/
+		// dp3 double edge化
+		vAHI_DioWakeEdge(u32_PORT_INPUT_MASK, u32_PORT_INPUT_MASK); // 割り込みエッジ（両エッジ）
+		//*/
 	} else {
 		vAHI_DioWakeEnable(0, u32_PORT_INPUT_MASK); // 割り込み禁止
 	}
