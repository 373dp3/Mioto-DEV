@page "/andon/"
@page "/andon/{panelIndexStr}/"
@page "/andon/{panelIndexStr}/{panelNameOrder}/"
@page "/andon/{panelIndexStr}/{panelNameOrder}/{dateOrder}"
@inject HttpClient Http
@inject NavigationManager NavMgr
@implements IDisposable
@inherits MiotoSockPage
@inject IJSRuntime js

@if (listPanelModel.Count > 0)
{
    <div class="container-fluid p-0">
        <h3>@panelNameOrder</h3>
        <p>@(currentDate.ToString("yyyy/MM/dd"))</p>
        <div class="row">
            @foreach (var item in listPanelModel)
            {
                var factor = item.listProductionFactor.OrderByDescending(q => q.stTicks).FirstOrDefault();
                var att = "";
                var factorName = "生産情報未入力";
                if (factor != null)
                {
                    if (factor.memo.Length > 0)
                    {
                        factorName = factor.memo;
                    }
                    else
                    {
                        factorName = ProductionFactor.GetStatusStr(factor.status, true);
                    }
                }
                else
                {
                    factor = new ProductionFactor();
                }
                att = "bg" + ButtonAttr.GetBgCode(factor.status) + " " + ButtonAttr.GetTextCode(factor.status);
                var battAtt = "text-muted";
                var lqiAtt = "text-muted";

                if (item.lastCycleTime.batt > config.alert.battGreen)
                {
                    battAtt = "text-primary";
                }
                else if (item.lastCycleTime.batt > config.alert.battRed)
                {
                    battAtt = "text-warning";
                }
                else if (item.lastCycleTime.batt > 0)
                {
                    battAtt = "text-danger";
                }
                if (item.lastCycleTime.lqi > config.alert.lqiGreen)
                {
                    lqiAtt = "text-primary";
                }
                else if (item.lastCycleTime.lqi > config.alert.lqiRed)
                {
                    lqiAtt = "text-warning";
                }
                else if (item.lastCycleTime.lqi > 0)
                {
                    lqiAtt = "text-danger";
                }

                <button class="btn col-xl-2 col-lg-3 col-md-4 col-sm-6 p-0 m-1 ">
                    <div class="card border@(ButtonAttr.GetBgCode(factor.status)) m-0 p-0"
                         @onclick="@(()=> { NavMgr.NavigateTo($"sensor/{item.mac}/{dateOrder}"); })">

                        @if ((item.status == PanelModel.RunOrStop.STOP)
                          && ((factor.status == ProductionFactor.Status.START_PRODUCTION)
                          || (factor.status == ProductionFactor.Status.START_PRODUCTION_NOCT)))
                        {
                            att = " bg-light text-dark";
                        }
                        <div class="card-header @att text-center text-truncate pt-1 pb-0">
                            <div class="@att text-center text-truncate">@(item.title)<br /><small>@factorName</small></div>
                        </div>
                        <table class="table mb-0">
                            <tr>
                                <td colspan="2" class="m-0 p-0 text-center">
                                    <small>
                                        <span class="oi oi-battery-full @battAtt"></span> @(item.lastCycleTime.batt.ToString("F1"))v　
                                        <span class="oi oi-signal @lqiAtt"></span> @(item.lastCycleTime.lqi)
                                        <span class="oi oi-clock"></span> @(item.lastCycleTime.dt.ToString("H:mm"))
                                    </small>
                                </td>
                            </tr>
                            <tr>
                                <td><small>出来高</small></td>
                                <td class="text-center"><span>@(item.dekidaka)</span></td>
                            </tr>
                            <tr>
                                <td><small>可動率</small></td>
                                <td class="text-center"><span>@((item.bekidou * 100.0).ToString("F1"))%</span></td>
                            </tr>
                            <tr>
                                <td><small>停止</small></td>
                                <td class="text-center"><span>@(item.getStopSecStr(factor))</span></td>
                            </tr>
                            <tr>
                                <td><small>稼働</small></td>
                                <td class="text-center"><span>@(item.getRunSecStr(factor))</span></td>
                            </tr>
                        </table>

                    </div>
                </button>

            }
        </div>

    </div><!-- container-fluid -->
}
<ModalDatePicker @ref="datepicker" CurrentDate="currentDate"></ModalDatePicker>
<div class="mt-3">
    <a class="btn btn-secondary" href="">一覧へ戻る</a>
    <button class="btn btn-primary"
            @onclick="@(()=> {
                        datepicker.Open(e=> {
                            dateOrder = e.ToString("yyyyMMdd");
                            NavMgr.NavigateTo($"andon/{panelIndexStr}/{panelNameOrder}/{dateOrder}");
                        });
                    })">
        日付選択
    </button>
    <button class="btn btn-secondary" @onclick="@(()=> { NavMgr.NavigateTo($"andon/{panelIndexStr}/{panelNameOrder}/"); })">
        本日のデータ
    </button>

</div>
<div class="mt-3">
    <h4>CSVによる出力</h4>
    <table class="table w-auto text-center">
        <tbody>
            <tr>
                <td>
                    <button class="btn btn-outline-dark btn-sm"
                            @onclick="@(()=> {
                        datepicker.Open(e=> {
                            csvDateFrom = e;
                            UpdateCsvDate();
                            StateHasChanged();
                        }, csvDateFrom.Ticks);
                    })">
                        @(csvDateFrom.ToShortDateString())
                    </button>
                    ～
                    <button class="btn btn-outline-dark btn-sm"
                            @onclick="@(()=> {
                        datepicker.Open(e=> {
                            csvDateTo = e;
                            UpdateCsvDate();
                            StateHasChanged();
                        }, csvDateTo.Ticks);
                    })">
                        @(csvDateTo.ToShortDateString())
                    </button>
                </td>
                <td>
                    <button class="btn btn-success btn-sm" @onclick="Save">保存</button>
                </td>
            </tr>
        </tbody>
    </table>
    <p>@debugMsg</p>
</div>

@code{
    [Parameter]
    public string panelNameOrder { get; set; } = null;
    [Parameter]
    public string panelIndexStr { get; set; } = null;
    [Parameter]
    public string dateOrder { get; set; } = null;

    public ModalDatePicker datepicker { get; set; } = null;
    public DateTime currentDate { get; set; } = DateTime.Now;
    List<PanelModel> listPanelModel = new List<PanelModel>();

    public DateTime csvDateFrom { get; set; } = DateTime.Now;
    public DateTime csvDateTo { get; set; } = DateTime.Now;

    /// <summary>
    /// 全ての処理の起点
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await init(NavMgr, Http, listPanelModel, panelIndexStr, Mode.PANEL_LIST, PanelModel.Create, dateOrder);

        if (dateOrder != null)
        {
            try
            {
                currentDate = DateTime.ParseExact(dateOrder, "yyyyMMdd", CultureInfo.InvariantCulture);
            }
            catch (Exception e) { }
            if (dateOrder.CompareTo(DateTime.Now.ToString("yyyyMMdd")) == 0)
            {
                dateOrder = "";
            }
        }
        else
        {
            currentDate = DateTime.Parse(DateTime.Now.ToString("yyyy/MM/dd"));
            dateOrder = "";
        }
        csvDateFrom = currentDate;
        csvDateTo = currentDate;
        await base.OnParametersSetAsync();
    }

    public void UpdateCsvDate()
    {
        if (csvDateFrom > csvDateTo)
        {
            var tmp = csvDateTo.Ticks;
            csvDateTo = csvDateFrom;
            csvDateFrom = new DateTime(tmp);
        }
    }

    public async Task Save()
    {
        var list = new List<string>();

        var dt = new DateTime(csvDateFrom.Ticks);
        while (dt <= csvDateTo)
        {
            list.Add(dt.ToString("yyyyMMdd"));
            dt = dt.AddDays(1);
        }

        var sb = new StringBuilder();
        var flg = true;
        using (var mgr = new MiotoSockPage())
        {
            foreach (var date in list)
            {
                debugMsg = $"{date}のロード中・・";
                Console.WriteLine(debugMsg);
                StateHasChanged();
                await mgr.init(NavMgr, Http, new List<PanelModel>(), panelIndexStr,
                    Mode.PANEL_LIST, PanelModel.Create, date);
                await mgr.ToCSV(s => sb.Append(s), date, flg);
                flg = false;
            }
        }

        var numList = list.Select(q =>
        {
            try
            {
                return Convert.ToInt32(q);
            }
            catch (Exception e) { return 0; }
        }).Where(q => q > 0);
        var min = numList.Min();
        var max = numList.Max();
        var fileName = "";
        if (min == max)
        {
            fileName = $"MIOTO-{min}.csv";
        }
        else
        {
            fileName = $"MIOTO-{min}-{max}.csv";
        }


        var bytes = USEncoder.ToEncoding.ToSJIS(sb.ToString());
        await Util.SaveAs(js, fileName, bytes);
        debugMsg = "";
        StateHasChanged();
    }
}