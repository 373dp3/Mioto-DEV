@page "/andon_graph/{panelIndexStr}/{panelNameOrder}/{dateOrder}"
@inject HttpClient Http
@inject NavigationManager NavMgr
@implements IDisposable
@inherits MiotoSockPage
@inject IJSRuntime js



@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util

<h2>@panelNameOrder @(parseDate(dateOrder).ToString("yyyy/MM/dd"))</h2>
<div class="m-0 p-1">
    <ModalDatePicker @ref="datepicker" CurrentDate="currentDate"></ModalDatePicker>
    <button class="btn btn-primary btn-sm"
            @onclick="@(()=> {
                            datepicker.Open(e=> {
                                if(datepicker.result == ModalDatePicker.Result.OK)
                                {
                                    dateOrder = e.ToString("yyyyMMdd");
                                    clear();
                                    NavMgr.NavigateTo($"andon_graph/{panelIndexStr}/{panelNameOrder}/{dateOrder}");
                                }
                            });
                        })">
        日付選択
    </button>
    @target @prgMsg
</div>
<div>@debugMsg</div>
<div class="container-fluid p-0">

    @if (listLineConfig_bekidou.Count > 0)
    {
        <h4>可動率・MT率</h4>
        <div class="row">
            @foreach (var cfg in listLineConfig_bekidou)
            {
                <div class="col-xl-4 col-lg-6 col-md-6 p-1 m-2 ">
                    <ChartJsLineChart Config="@cfg" Width="600" Height="180" />
                </div>
            }
        </div>
    }
    @if (listLineConfig_Chokotei.Count > 0)
    {
        <h4>チョコ停</h4>
        <div class="row">
            @foreach (var cfg in listLineConfig_Chokotei)
            {
                <div class="col-xl-4 col-lg-6 col-md-6 p-1 m-2 ">
                    <ChartJsLineChart Config="@cfg" Width="600" Height="180" />
                </div>
            }
        </div>
    }
</div>

@code{
    List<LineConfig> listLineConfig_AveCt = new List<LineConfig>();
    List<LineConfig> listLineConfig_bekidou = new List<LineConfig>();
    List<LineConfig> listLineConfig_Chokotei = new List<LineConfig>();
    const string jpJp = "jp-JP";
    private bool _localeChangeWasAttempted = false;

    public string[] ColorPallet = new string[]{
        "#4472C4",
        "#ED7D31",
        "#A5A5A5",
        "#FFC000",
        "#5B9BD5",
        "#70AD47",
        "#264478",
        "#9E480E",
        "#636363",
        "#997300",
        "#255E91",
        "#43682B"
    };
    public string[] ColorPalletBackGround = new string[]{
        "#A1B8E1",
        "#F6BE98",
        "#D2D2D2",
        "#FFDF7F",
        "#ADCDEA",
        "#B7D6A3",
        "#92A1BB",
        "#CEA386",
        "#B1B1B1",
        "#CCB97F",
        "#92AEC8",
        "#A1B395"
    };

    private class DataSet
    {
        public string legend { get; set; } = "";
        public List<TimeTuple<double>> dataset { get; set; } = new List<TimeTuple<double>>();
    }
    private async Task TryChangeLocale()
    {
        if (_localeChangeWasAttempted) return;
        _localeChangeWasAttempted = true;

        var locales = await js.GetAvailableLocales();
        bool localeChanged = false;
        if (locales != null && locales.Contains(jpJp))
        {
            localeChanged = await js.ChangeLocale(jpJp);
        }

        if (!localeChanged) Console.WriteLine($"Locale was not changed to {jpJp}. Either it already is {jpJp} or this locale doesn't exist.");
    }

    private LineConfig createLineConfig(string title, List<DataSet> dataSetList, int ColorIndexOffset = 0)
    {
        var tmpLineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = false,
                    Text = title
                },
                Legend = new Legend
                {
                    Position = Position.Right,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Auto
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Hour,
                                Round = TimeMeasurement.Second,
                                TooltipFormat = "MM/DD HH:mm:ss",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                Display = false
                            }
                        }
                }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        //データの配置
        int cnt = 0;
        foreach(var ds in dataSetList)
        {
            var tempDataSet = new LineDataset<TimeTuple<double>>
            {
                BackgroundColor = ColorPalletBackGround[(cnt+ ColorIndexOffset) %ColorPalletBackGround.Length],
                BorderColor = ColorPallet[(cnt+ ColorIndexOffset) % ColorPallet.Length],
                Label = ds.legend,
                Fill = true,
                BorderWidth = 2,
                PointRadius = 0,
                PointBorderWidth = 0,
                SteppedLine = SteppedLine.True
            };
            tempDataSet.AddRange(ds.dataset);
            tmpLineConfig.Data.Datasets.Add(tempDataSet);
            cnt++;
        }

        return tmpLineConfig;

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await TryChangeLocale();
    }

}

@code {
    [Parameter]
    public string panelIndexStr { get; set; } = null;
    [Parameter]
    public string panelNameOrder { get; set; } = null;
    [Parameter]
    public string dateOrder { get; set; } = null;
    public DateTime currentDate;
    public ModalDatePicker datepicker { get; set; } = null;

    public string target { get; set; } = "";
    public string prgMsg { get; set; } = "";

    List<PanelModel> listPanelModel = new List<PanelModel>();
    Dictionary<long, List<PanelModelSmallStop>> dictMac2PanelList = new Dictionary<long, List<PanelModelSmallStop>>();

    const int UI_UPDATE_DELAY_MS = 50;

    protected override async Task OnParametersSetAsync()
    {
        currentDate = parseDate(dateOrder);
        await init(NavMgr, Http, listPanelModel, panelIndexStr, Mode.PANEL_LIST, PanelModel.Create, DateTime.Now.AddDays(1).ToString("yyyyMMdd"));
        Console.WriteLine("onParamAsyc:" + this.listPanelModel.Count);

        await loadData();
        await Task.Yield();
    }


    private DateTime parseDate(string yyyyMMdd)
    {
        var ymd = Convert.ToInt32(yyyyMMdd);
        var y = (int)(ymd / 10000);
        var m = (int)((ymd - y * 10000) / 100);
        var d = ymd - y * 10000 - m * 100;
        return new DateTime(y, m, d);
    }
    private void clear()
    {
        dictMac2PanelList.Clear();
        listLineConfig_AveCt.Clear();
        listLineConfig_bekidou.Clear();
        listLineConfig_Chokotei.Clear();
        StateHasChanged();
    }

    private async Task loadData()
    {
        var dateList = new List<string>();
        var dateTo = parseDate(dateOrder);
        var dateFrom = dateTo.AddDays(0);//-6 << 1週間分
        var dtList = new List<DateTime>();
        var hh = (int)(config.dateLineHHMM / 100);
        var mm = config.dateLineHHMM - 100 * hh;

        var dt = new DateTime(dateFrom.Ticks);
        while (dt <= dateTo)
        {
            dateList.Add(dt.ToString("yyyyMMdd"));
            dt = dt.AddDays(1);
        }
        Console.WriteLine($"days {dateList.Count}");

        var sb = new StringBuilder();
        var flg = true;
        using (var mgr = new MiotoSockPage())
        {
            var cnt = 0;
            foreach (var date in dateList)
            {
                target = $"{date}のロード中・・";
                dtList.Add(parseDate(date).AddHours(hh).AddMinutes(mm));

                prgMsg = $" {((100.0 * cnt) / dateList.Count).ToString("F1")}%";
                cnt++;
                StateHasChanged();
                Console.WriteLine(target);
                var listPanel = new List<PanelModel>();
                await mgr.init(NavMgr, Http, listPanel, panelIndexStr,
                    Mode.PANEL_LIST, PanelModelSmallStop.Create, date, (msg) =>
                    {
                        if (msg.Length == 0) { return; }
                        prgMsg = msg;
                        Console.WriteLine("gui:" + msg);
                        StateHasChanged();
                        Task.Yield();
                    });
                target = $"{date}のCSV変換中・・";
                StateHasChanged();
                Console.WriteLine(target);
                await mgr.ToCSV(s => sb.Append(s), date, flg);
                foreach (PanelModelSmallStop panel in listPanel)
                {
                    if (panel == null) { continue; }
                    if (dictMac2PanelList.ContainsKey(panel.mac) == false)
                    {
                        dictMac2PanelList.Add(panel.mac, new List<PanelModelSmallStop>());
                    }
                    dictMac2PanelList[panel.mac].Add(panel);
                }
                flg = false;
            }
        }
        target = "";
        prgMsg = "";
        StateHasChanged();

        //平均CT
        /*
        setGraphValueHook(dtList, listLineConfig_AveCt, 0, (fa) =>
        {
            return Convert.ToDouble(fa.aveCt.ToString("F1"));
        });//*/

        //可動率
        target = "可動率グラフ生成中";
        Console.WriteLine(target);
        StateHasChanged();
        await Task.Delay(UI_UPDATE_DELAY_MS);
        await setGraphValueHook(dtList, listLineConfig_bekidou, 1, (fa) =>
        {
            var beki = fa.GetKadouritsu();
            if(beki>1) { beki = 1; }
            return Convert.ToDouble((beki * 100).ToString("F1"));
        });
        foreach(var opt in listLineConfig_bekidou.Select(q => q.Options))
        {
            opt.Scales.yAxes = new List<CartesianAxis>
            {
                new LinearCartesianAxis
                {
                    Ticks = new LinearCartesianTicks
                    {
                        Min = 0, Max=100
                    }
                }
            };
        }

        //チョコ停 listLineConfig_Chokotei
        target = "チョコ停グラフ生成中";
        Console.WriteLine(target);
        StateHasChanged();
        await Task.Delay(UI_UPDATE_DELAY_MS);
        foreach (var mac in dictMac2PanelList.Keys)
        {
            var dataSetList = new List<DataSet>();
            var samePanelList = dictMac2PanelList[mac];
            var ds = new DataSet() { legend = samePanelList[0].tweCfg.name };
            long cnt = 0;
            var i = 0;
            foreach (var panel in samePanelList)
            {
                ds.dataset.Add(new TimeTuple<double>(new Moment(dtList[i]), 0));

                foreach (var ss in panel.listSmallStop)
                {
                    cnt ++;
                    ds.dataset.Add(new TimeTuple<double>(new Moment(ss.dt.AddSeconds(-1 * ss.ct01)),
                        Convert.ToDouble((ss.ct01 / 60.0).ToString("F1"))));
                    ds.dataset.Add(new TimeTuple<double>(new Moment(ss.dt), 0));
                }
                i++;
                await Task.Yield();
            }
            if (cnt == 0) { continue; }
            ds.dataset.Add(new TimeTuple<double>(new Moment(dtList[i - 1].AddDays(1)), 0));
            dataSetList.Add(ds);
            listLineConfig_Chokotei.Add(createLineConfig("", dataSetList, 2));
        }
        target = "";
        StateHasChanged();

    }
    private async Task setGraphValueHook(List<DateTime> dtList, List<LineConfig> listCfg, int graphColorOffset, Func<ProductionFactor, double> func)
    {
        foreach (var mac in dictMac2PanelList.Keys)
        {
            var dataSetList = new List<DataSet>();
            var samePanelList = dictMac2PanelList[mac];
            var ds = new DataSet() { legend = samePanelList[0].tweCfg.name };
            long cnt = 0;
            var i = 0;
            foreach (var panel in samePanelList)
            {
                ds.dataset.Add(new TimeTuple<double>(new Moment(dtList[i]), 0));
                foreach (var factor in panel.listProductionFactor)
                {
                    cnt += factor.itemCounts;
                    ds.dataset.Add(new TimeTuple<double>(new Moment(new DateTime(factor.stTicks)), func(factor)));
                    var endTicks = factor.endTicks;
                    if (endTicks == long.MaxValue)
                    {
                        endTicks = factor.lastCycleTicks;
                    }
                    if (endTicks == long.MaxValue)
                    {
                        continue;
                    }
                    ds.dataset.Add(new TimeTuple<double>(new Moment(new DateTime(endTicks)), 0));
                }
                await Task.Yield();
                i++;
            }
            if (cnt == 0) { continue; }
            ds.dataset.Add(new TimeTuple<double>(new Moment(dtList[i - 1].AddDays(1)), 0));
            dataSetList.Add(ds);
            listCfg.Add(createLineConfig("", dataSetList, graphColorOffset));
        }
    }

}
