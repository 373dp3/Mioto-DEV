@page "/counter"
@inject NavigationManager NavMgr
@implements IDisposable
<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<p>@exception</p>
<p>@debugMsg</p>
@code {
    private int currentCount = 0;
    private List<IDisposable> listDispose = new List<IDisposable>();
    private byte[] buffer = new byte[1024 * 1024];
    public string exception = "";
    public string debugMsg = "";

    protected override Task OnInitializedAsync()
    {
        //exception = $"Uri:{NavMgr.Uri}, BaseUri:{NavMgr.BaseUri}, Host:{new Uri(NavMgr.Uri).Host}";

        return base.OnInitializedAsync();
    }

    private async Task IncrementCount()
    {
        currentCount++;
        //*/
        if (listDispose.Count == 0)
        {
            var ws = new CsvCashSocket(new Uri(NavMgr.Uri).Host);
            listDispose.Add(ws);
            await ws.connectAsync((csvAry) =>
            {
                if (csvAry == null) return ;
                var msg = "";
                foreach (var csv in csvAry)
                {
                    msg += csv.ToString() + ",";
                }
                debugMsg = msg;
                this.StateHasChanged();
            });
        }
        //*/
        /*
        if (listDispose.Count == 0)
        {
            var sw = new SocketWorker($"ws://{new Uri(NavMgr.Uri).Host}/csvcash/");
            listDispose.Add(sw);
            await sw.connectAsync((msg) =>
            {
                exception = msg;
                this.StateHasChanged();
                return true;
            });
        }
        //*/
        /*
        if (listDispose.Count == 0)
        {
            try
            {
                var ws = new ClientWebSocket();
                listDispose.Add(ws);
                await ws.ConnectAsync(new Uri("ws://localhost/ws/"), System.Threading.CancellationToken.None);

                await ws.SendAsync(
                    new ArraySegment<byte>(Encoding.UTF8.GetBytes($"test message {currentCount}")),
                    WebSocketMessageType.Text, true,
                    System.Threading.CancellationToken.None
                    );
                exception = ws.State.ToString();
            }
            catch (Exception e)
            {
                exception = e.ToString();
                return;
            }
        }
        //*/
    }

    public void Dispose()
    {
        foreach (var item in listDispose)
        {
            item.Dispose();
        }
        buffer = null;
    }
}
